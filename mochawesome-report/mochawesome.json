{
  "stats": {
    "suites": 10,
    "tests": 84,
    "passes": 71,
    "pending": 0,
    "failures": 13,
    "start": "2021-11-28T10:36:39.346Z",
    "end": "2021-11-28T10:36:39.486Z",
    "duration": 140,
    "testsRegistered": 84,
    "passPercent": 84.52380952380952,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c5a58da1-53e7-4785-aafd-70198e40f25a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
          "title": "add.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ADD-1 Test adding positive numbers",
              "fullTitle": "add.js ADD-1 Test adding positive numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = getRandomPositiveInteger(10000);\nconst secondNumber = getRandomPositiveInteger(10000);\nexpect(add(firstNumber,secondNumber)).to.equal(firstNumber+secondNumber);",
              "err": {},
              "uuid": "7652be0d-96c0-49d6-98ea-7bf2351a01ad",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-2 Test adding negative numbers",
              "fullTitle": "add.js ADD-2 Test adding negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = getRandomPositiveInteger(10000);\nconst secondNumber = getRandomPositiveInteger(10000);\nexpect(add(-firstNumber,-secondNumber)).to.equal(-firstNumber+(-secondNumber));",
              "err": {},
              "uuid": "d60f9179-034f-4728-bada-d4d4c554876e",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-3 Test adding positive and negative numbers",
              "fullTitle": "add.js ADD-3 Test adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let firstNumber = getRandomPositiveInteger(10000);\nlet secondNumber = getRandomPositiveInteger(10000);\nexpect(add(firstNumber,-secondNumber)).to.equal(firstNumber+(-secondNumber));\nfirstNumber = getRandomPositiveInteger(10000);\nsecondNumber = getRandomPositiveInteger(10000);\nexpect(add(-firstNumber,secondNumber)).to.equal(-firstNumber+secondNumber);",
              "err": {},
              "uuid": "53683a8c-a854-46aa-b70a-fe64f0859cfd",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-4 Test adding zero",
              "fullTitle": "add.js ADD-4 Test adding zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let firstNumber = 0;\nlet secondNumber = getRandomPositiveInteger(10000);\nexpect(add(firstNumber,secondNumber)).to.equal(firstNumber+(secondNumber));\nfirstNumber = getRandomPositiveInteger(10000);\nsecondNumber = 0;\nexpect(add(firstNumber,secondNumber)).to.equal(firstNumber+secondNumber);",
              "err": {},
              "uuid": "029ef025-e6b4-4f56-a8f1-92d8264f64ae",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-5 Test too big result",
              "fullTitle": "add.js ADD-5 Test too big result",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = Number.MAX_VALUE-1;\nconst secondNumber = Number.MAX_VALUE-1;\nexpect(add(firstNumber,secondNumber)).to.equal(Infinity);",
              "err": {},
              "uuid": "e53375d0-ff82-4a3b-bd71-f147a11faadf",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-6 Test too small result",
              "fullTitle": "add.js ADD-6 Test too small result",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = -Number.MAX_VALUE+1;\nconst secondNumber = -Number.MAX_VALUE+1;\nexpect(add(firstNumber,secondNumber)).to.equal(-Infinity);",
              "err": {},
              "uuid": "cac11731-54ef-43e3-b8f8-42313dbdca3a",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-7 Test undefined values",
              "fullTitle": "add.js ADD-7 Test undefined values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let firstNumber = undefined;\nlet secondNumber = getRandomPositiveInteger(10000);\nexpect(add(firstNumber,secondNumber)).to.equal(secondNumber);\nfirstNumber = getRandomPositiveInteger(10000);\nsecondNumber = undefined;\nexpect(add(firstNumber,secondNumber)).to.equal(firstNumber);\nfirstNumber = undefined;\nsecondNumber = undefined;\nexpect(add(firstNumber,secondNumber)).to.equal(0);",
              "err": {},
              "uuid": "b7f5ba29-e193-4fb9-b113-3eb0ee620a13",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-8 Test string values (numbers)",
              "fullTitle": "add.js ADD-8 Test string values (numbers)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = `${getRandomPositiveInteger(10000)}`;\nconst secondNumber = `${getRandomPositiveInteger(10000)}`;\nexpect(add(firstNumber,secondNumber)).to.equal(firstNumber+secondNumber);",
              "err": {},
              "uuid": "24d215ce-8699-4130-a2ad-2644758d3472",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-9 Test string values (non-numbers)",
              "fullTitle": "add.js ADD-9 Test string values (non-numbers)",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const firstNumber = \"one\";\nconst secondNumber = \"two\";\nexpect(add(firstNumber,secondNumber)).to.equal(NaN);",
              "err": {
                "message": "AssertionError: expected 'onetwo' to equal NaN",
                "estack": "AssertionError: expected 'onetwo' to equal NaN\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/add.test.js:74:50)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "b0955208-8dde-47dc-98fe-3d9cc55bff32",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-10 Test objects",
              "fullTitle": "add.js ADD-10 Test objects",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = { number: 1 };\nconst secondNumber = { number: 2 };\nexpect(add(firstNumber,secondNumber)).to.deep.equal(NaN);",
              "err": {},
              "uuid": "a893af30-a8ee-42f4-8fcd-99cad9f39206",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD-11 Test adding null",
              "fullTitle": "add.js ADD-11 Test adding null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstNumber = getRandomPositiveInteger(10000);\nconst secondNumber = null;\nexpect(add(firstNumber,secondNumber)).to.deep.equal(firstNumber);",
              "err": {},
              "uuid": "bed4793e-89a4-472b-b70f-bafe2da2fea7",
              "parentUUID": "856b31c3-bf09-4805-a51b-9c03dc0957b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7652be0d-96c0-49d6-98ea-7bf2351a01ad",
            "d60f9179-034f-4728-bada-d4d4c554876e",
            "53683a8c-a854-46aa-b70a-fe64f0859cfd",
            "029ef025-e6b4-4f56-a8f1-92d8264f64ae",
            "e53375d0-ff82-4a3b-bd71-f147a11faadf",
            "cac11731-54ef-43e3-b8f8-42313dbdca3a",
            "b7f5ba29-e193-4fb9-b113-3eb0ee620a13",
            "24d215ce-8699-4130-a2ad-2644758d3472",
            "a893af30-a8ee-42f4-8fcd-99cad9f39206",
            "bed4793e-89a4-472b-b70f-bafe2da2fea7"
          ],
          "failures": [
            "b0955208-8dde-47dc-98fe-3d9cc55bff32"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
          "title": "ceil.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\ceil.test.js",
          "file": "\\test\\ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CEIL-1 Test rounding positive decimal number with no precision",
              "fullTitle": "ceil.js CEIL-1 Test rounding positive decimal number with no precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const decimalNumber = 1.23;\nconst ceiled = ceil(decimalNumber);\nexpect(ceiled).to.equal(2);",
              "err": {},
              "uuid": "b3a10e7d-6570-4256-9427-2436ff0ad91d",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-2 Test rounding positive integer number with no precision",
              "fullTitle": "ceil.js CEIL-2 Test rounding positive integer number with no precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integerNumber = 1;\nconst ceiled = ceil(integerNumber);\nexpect(ceiled).to.equal(1);",
              "err": {},
              "uuid": "060f697f-1f56-425f-8395-db462141c5fc",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-3 Test rounding positive decimal number with positive precision",
              "fullTitle": "ceil.js CEIL-3 Test rounding positive decimal number with positive precision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const decimalNumber = 1.23;\nconst ceiled = ceil(decimalNumber,1);\nexpect(ceiled).to.equal(1.3);",
              "err": {},
              "uuid": "b004dd08-1309-4be7-bd3a-93a4872934f3",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-4 Test rounding positive decimal number with negative precision",
              "fullTitle": "ceil.js CEIL-4 Test rounding positive decimal number with negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const decimalNumber = 114.23;\nconst ceiled = ceil(decimalNumber,-1);\nexpect(ceiled).to.equal(120);",
              "err": {},
              "uuid": "231c419f-43d3-481e-8193-b646152a86d8",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-5 Test rounding negative decimal number with negative precision",
              "fullTitle": "ceil.js CEIL-5 Test rounding negative decimal number with negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const decimalNumber = -114.23;\nconst ceiled = ceil(decimalNumber,-1);\nexpect(ceiled).to.equal(-110);",
              "err": {},
              "uuid": "e462c533-276b-493a-a2a7-480d0ff922b7",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-6 Test rounding negative decimal number with positive precision",
              "fullTitle": "ceil.js CEIL-6 Test rounding negative decimal number with positive precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const decimalNumber = -114.23;\nconst ceiled = ceil(decimalNumber,1);\nexpect(ceiled).to.equal(-114.2);",
              "err": {},
              "uuid": "811aa9ba-643c-43b7-9ce6-852b3461178f",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-7 Test rounding positive integer number with positive precision",
              "fullTitle": "ceil.js CEIL-7 Test rounding positive integer number with positive precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integerNumber = 101;\nconst ceiled = ceil(integerNumber,2);\nexpect(ceiled).to.equal(101);",
              "err": {},
              "uuid": "0df53cc5-55e1-4227-9152-97e3432c6506",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-8 Test rounding positive integer number with negative precision",
              "fullTitle": "ceil.js CEIL-8 Test rounding positive integer number with negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integerNumber = 1140;\nconst ceiled = ceil(integerNumber,-2);\nexpect(ceiled).to.equal(1200);",
              "err": {},
              "uuid": "13089652-9379-40ed-aa98-4da80f2e3a1e",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-9 Test rounding negative integer number with positive precision",
              "fullTitle": "ceil.js CEIL-9 Test rounding negative integer number with positive precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integerNumber = -101;\nconst ceiled = ceil(integerNumber,2);\nexpect(ceiled).to.equal(-101);",
              "err": {},
              "uuid": "6f1c2c2f-9c5d-42c2-8922-95a721ab6598",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-10 Test rounding negative integer number with negative precision",
              "fullTitle": "ceil.js CEIL-10 Test rounding negative integer number with negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integerNumber = -1140;\nconst ceiled = ceil(integerNumber,-2);\nexpect(ceiled).to.equal(-1100);",
              "err": {},
              "uuid": "e46462de-152e-4977-bf72-2d3cb79b01c5",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-11 Test rounding illegal number values with legal precision",
              "fullTitle": "ceil.js CEIL-11 Test rounding illegal number values with legal precision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const illegalValues = [\n    Number.MAX_VALUE*2,\n    -Number.MAX_VALUE*2,\n    \"one\",\n    { number: 1 }\n]\nfor (const value of illegalValues) {\n    const ceiled = ceil(value, 1);\n    expect(ceiled).to.deep.equal(NaN);\n}",
              "err": {},
              "uuid": "a68bc1bb-b367-494e-9269-40fd1ce05624",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-12 Test rounding legal number values with illegal precision",
              "fullTitle": "ceil.js CEIL-12 Test rounding legal number values with illegal precision",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const illegalValues = [\n    \"one\",\n    { number: 1 }\n]\nfor (const value of illegalValues) {\n    const ceiled = ceil(1.23, value);\n    expect(ceiled).to.deep.equal(2);\n}",
              "err": {},
              "uuid": "ac5e512a-72cf-4dc0-af62-f56ae376808f",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-13 Test ceil with no parameters",
              "fullTitle": "ceil.js CEIL-13 Test ceil with no parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ceiled = ceil();\nexpect(ceiled).to.deep.equal(NaN);",
              "err": {},
              "uuid": "19943811-fbd3-4fdf-aa74-e8868dc24135",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CEIL-14 Test rounding legal number values with infinite precisions",
              "fullTitle": "ceil.js CEIL-14 Test rounding legal number values with infinite precisions",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let ceiled = ceil(1.23, Number.MAX_VALUE*2);\nexpect(ceiled).to.deep.equal(1.23);    \nceiled = ceil(1.23, -Number.MAX_VALUE*2);\nexpect(ceiled).to.deep.equal(1e+292);",
              "err": {},
              "uuid": "1e514e4f-bcf8-4f13-bee0-76b8e4e6d39a",
              "parentUUID": "5e3c8ff3-3b9d-4bad-bd71-5770f4bcf49b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3a10e7d-6570-4256-9427-2436ff0ad91d",
            "060f697f-1f56-425f-8395-db462141c5fc",
            "b004dd08-1309-4be7-bd3a-93a4872934f3",
            "231c419f-43d3-481e-8193-b646152a86d8",
            "e462c533-276b-493a-a2a7-480d0ff922b7",
            "811aa9ba-643c-43b7-9ce6-852b3461178f",
            "0df53cc5-55e1-4227-9152-97e3432c6506",
            "13089652-9379-40ed-aa98-4da80f2e3a1e",
            "6f1c2c2f-9c5d-42c2-8922-95a721ab6598",
            "e46462de-152e-4977-bf72-2d3cb79b01c5",
            "a68bc1bb-b367-494e-9269-40fd1ce05624",
            "ac5e512a-72cf-4dc0-af62-f56ae376808f",
            "19943811-fbd3-4fdf-aa74-e8868dc24135",
            "1e514e4f-bcf8-4f13-bee0-76b8e4e6d39a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
          "title": "chunk.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\chunk.test.js",
          "file": "\\test\\chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CHUNK-1 Test chunk with no size parameter",
              "fullTitle": "chunk.js CHUNK-1 Test chunk with no size parameter",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a','b','c'];\nconst chunked = chunk(array);\nexpect(chunked).to.deep.equal([['a'],['b'],['c']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c' ], ,  ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]",
                "estack": "AssertionError: expected [ [ 'c' ], ,  ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/chunk.test.js:9:33)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n   ]\n ]\n"
              },
              "uuid": "f8331d60-deeb-4221-b083-22ea1c18017d",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-2 Test chunk with positive size parameter",
              "fullTitle": "chunk.js CHUNK-2 Test chunk with positive size parameter",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a','b','c'];\nconst chunked = chunk(array,2);\nexpect(chunked).to.deep.equal([['a','b'],['c']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', undefined ],  ] to deeply equal [ [ 'a', 'b' ], [ 'c' ] ]",
                "estack": "AssertionError: expected [ [ 'c', undefined ],  ] to deeply equal [ [ 'a', 'b' ], [ 'c' ] ]\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/chunk.test.js:14:33)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "e59ec7ec-c896-4805-a46b-50f40ca1ea53",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-3 Test chunk with illegal size parameter",
              "fullTitle": "chunk.js CHUNK-3 Test chunk with illegal size parameter",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a','b','c'];\nconst illegalValues = [\n    -1, \n    0.5,\n    \"two\",\n    [\"one\", \"two\"],\n    null,\n    undefined\n]\nfor (const value of illegalValues) {\n    const chunked = chunk(array,value);\n    expect(chunked).to.deep.equal([]);\n}",
              "err": {
                "message": "AssertionError: expected [ [ 'c' ], ,  ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'c' ], ,  ] to deeply equal []\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/chunk.test.js:28:37)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "- [\n-   [\n-     \"c\"\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "b5f85e05-86f0-42ce-89d2-f4344c66de38",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-4 Test chunk with no parameters",
              "fullTitle": "chunk.js CHUNK-4 Test chunk with no parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chunked = chunk();\nexpect(chunked).to.deep.equal([]);",
              "err": {},
              "uuid": "bc07a2eb-25d9-4516-ba84-5b7603683158",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-5 Test chunk with only size parameter",
              "fullTitle": "chunk.js CHUNK-5 Test chunk with only size parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chunked = chunk(3);\nexpect(chunked).to.deep.equal([]);",
              "err": {},
              "uuid": "a03d8b22-06df-4b78-b65b-9bd99bb9a3bb",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-6 Test chunk with illegal array parameter",
              "fullTitle": "chunk.js CHUNK-6 Test chunk with illegal array parameter",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const illegalValues = [\n    [], \n    0.5,\n    null,\n    undefined,\n    { a: 1, b: 2},\n    \"two\"\n]\nfor (const value of illegalValues) {\n    const chunked = chunk(value,2);\n    expect(chunked).to.deep.equal([]);\n}",
              "err": {
                "message": "AssertionError: expected [ [ 'o', undefined ],  ] to deeply equal []",
                "estack": "AssertionError: expected [ [ 'o', undefined ],  ] to deeply equal []\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/chunk.test.js:50:37)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "- [\n-   [\n-     \"o\"\n-     [undefined]\n-   ]\n- ]\n+ []\n"
              },
              "uuid": "179556a8-1107-48a4-a069-71bc7d077ce8",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CHUNK-7 Test chunk with array of arrays",
              "fullTitle": "chunk.js CHUNK-7 Test chunk with array of arrays",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [['a','b'],['c','d']];\nconst chunked = chunk(array);\nexpect(chunked).to.deep.equal([[['a','b']],[['c','d']]]);",
              "err": {
                "message": "AssertionError: expected [ [ [ 'c', 'd' ] ],  ] to deeply equal [ [ [ 'a', 'b' ] ], [ [ 'c', 'd' ] ] ]",
                "estack": "AssertionError: expected [ [ [ 'c', 'd' ] ],  ] to deeply equal [ [ [ 'a', 'b' ] ], [ [ 'c', 'd' ] ] ]\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/chunk.test.js:56:33)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n     [\n+       \"a\"\n+       \"b\"\n+     ]\n+   ]\n+   [\n+     [\n       \"c\"\n       \"d\"\n     ]\n   ]\n"
              },
              "uuid": "4feb2cc0-4f82-44f7-ab7a-31c9d3fa6eda",
              "parentUUID": "904a07ff-4cc0-4818-8fc0-df1abc71c0aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc07a2eb-25d9-4516-ba84-5b7603683158",
            "a03d8b22-06df-4b78-b65b-9bd99bb9a3bb"
          ],
          "failures": [
            "f8331d60-deeb-4221-b083-22ea1c18017d",
            "e59ec7ec-c896-4805-a46b-50f40ca1ea53",
            "b5f85e05-86f0-42ce-89d2-f4344c66de38",
            "179556a8-1107-48a4-a069-71bc7d077ce8",
            "4feb2cc0-4f82-44f7-ab7a-31c9d3fa6eda"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d0658d9-96e5-4c8e-ba8b-1ef70504eaf2",
          "title": "countBy.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\countBy.test.js",
          "file": "\\test\\countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "COUNTBY-1 Test counting array of objects",
              "fullTitle": "countBy.js COUNTBY-1 Test counting array of objects",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const counts = countBy(foodReviews, value => value.score);\nexpect(counts).to.deep.equal({'10': 2, '0': 1});",
              "err": {
                "message": "AssertionError: expected { '0': 0, '10': 1 } to deeply equal { '0': 1, '10': 2 }",
                "estack": "AssertionError: expected { '0': 0, '10': 1 } to deeply equal { '0': 1, '10': 2 }\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/countBy.test.js:13:32)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"0\": 0\n-   \"10\": 1\n+   \"0\": 1\n+   \"10\": 2\n }\n"
              },
              "uuid": "a3f5e0b4-c516-4f46-acea-49999127ae1a",
              "parentUUID": "5d0658d9-96e5-4c8e-ba8b-1ef70504eaf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "COUNTBY-2 Test counting objects",
              "fullTitle": "countBy.js COUNTBY-2 Test counting objects",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const pizza = {\n    'name': 'Karim Special',\n    'ingredients': [\n        { 'name': 'Tomato sauce', 'amount': '3 tbsp' },\n        { 'name': 'Vegan cheese', 'amount': '0.5 dl' },\n        { 'name': 'Vegan salami', 'amount': '6 slices' },\n        { 'name': 'Fresh chili peppers', 'amount': '4 whole peppers'}\n    ]\n}\nconst counts = countBy(pizza.ingredients, value => value.name);\nexpect(counts).to.deep.equal({'Tomato sauce': 1, 'Vegan cheese': 1, 'Vegan salami': 1, 'Fresh chili peppers': 1});",
              "err": {
                "message": "AssertionError: expected { Object (Tomato sauce, Vegan cheese, ...) } to deeply equal { Object (Tomato sauce, Vegan cheese, ...) }",
                "estack": "AssertionError: expected { Object (Tomato sauce, Vegan cheese, ...) } to deeply equal { Object (Tomato sauce, Vegan cheese, ...) }\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/countBy.test.js:26:32)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"Fresh chili peppers\": 0\n-   \"Tomato sauce\": 0\n-   \"Vegan cheese\": 0\n-   \"Vegan salami\": 0\n+   \"Fresh chili peppers\": 1\n+   \"Tomato sauce\": 1\n+   \"Vegan cheese\": 1\n+   \"Vegan salami\": 1\n }\n"
              },
              "uuid": "31b9fe09-ba67-4b85-a9b4-5fd534b955d3",
              "parentUUID": "5d0658d9-96e5-4c8e-ba8b-1ef70504eaf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "COUNTBY-3 Test countBy with illegal iteratee parameter",
              "fullTitle": "countBy.js COUNTBY-3 Test countBy with illegal iteratee parameter",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let counts = countBy(foodReviews, value => null);\nexpect(counts).to.deep.equal({ 'null': 3});\ncounts = countBy(foodReviews, value => undefined);\nexpect(counts).to.deep.equal({ 'undefined': 3});\ncounts = countBy(foodReviews, value => 'testi');\nexpect(counts).to.deep.equal({ 'testi': 3});\ncounts = countBy(foodReviews, value => ['testi']);\nexpect(counts).to.deep.equal({ 'testi': 3});\nconst testiObject = { 'name': 'testi' };\ncounts = countBy(foodReviews, value => testiObject);\nexpect(counts).to.deep.equal({ '[object Object]': 3});\ncounts = countBy(foodReviews, value => 1);\nexpect(counts).to.deep.equal({ '1': 3});",
              "err": {
                "message": "AssertionError: expected { null: 2 } to deeply equal { null: 3 }",
                "estack": "AssertionError: expected { null: 2 } to deeply equal { null: 3 }\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/countBy.test.js:31:32)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"null\": 2\n+   \"null\": 3\n }\n"
              },
              "uuid": "722aeaf1-1209-4344-b52c-7c74c89786ba",
              "parentUUID": "5d0658d9-96e5-4c8e-ba8b-1ef70504eaf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "COUNTBY-4 Test countBy with illegal collection parameter",
              "fullTitle": "countBy.js COUNTBY-4 Test countBy with illegal collection parameter",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let counts = countBy(null, value => value);\nexpect(counts).to.deep.equal({});\ncounts = countBy(undefined, value => value);\nexpect(counts).to.deep.equal({});\ncounts = countBy(1, value => value);\nexpect(counts).to.deep.equal({});\ncounts = countBy(\"str\", value => value);\nexpect(counts).to.deep.equal({ 's': 1, 't': 1, 'r': 1});",
              "err": {
                "message": "AssertionError: expected { s: 0, t: 0, r: 0 } to deeply equal { s: 1, t: 1, r: 1 }",
                "estack": "AssertionError: expected { s: 0, t: 0, r: 0 } to deeply equal { s: 1, t: 1, r: 1 }\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/countBy.test.js:53:32)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"r\": 0\n-   \"s\": 0\n-   \"t\": 0\n+   \"r\": 1\n+   \"s\": 1\n+   \"t\": 1\n }\n"
              },
              "uuid": "0767adb8-f842-47d7-a7c9-b4f82b574520",
              "parentUUID": "5d0658d9-96e5-4c8e-ba8b-1ef70504eaf2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a3f5e0b4-c516-4f46-acea-49999127ae1a",
            "31b9fe09-ba67-4b85-a9b4-5fd534b955d3",
            "722aeaf1-1209-4344-b52c-7c74c89786ba",
            "0767adb8-f842-47d7-a7c9-b4f82b574520"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d3fb50de-d281-49bb-bb48-2a9879524d6c",
          "title": "defaultTo.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\defaultTo.test.js",
          "file": "\\test\\defaultTo.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "DEFAULTTO-1 Test with legal positive numbers as value",
              "fullTitle": "defaultTo.js DEFAULTTO-1 Test with legal positive numbers as value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const num1 = getRandomPositiveInteger(10000);\nconst num2 = getRandomPositiveInteger(10000);\nconst num = defaultTo(num1,num2);\nexpect(num).to.equal(num1);",
              "err": {},
              "uuid": "aae4eaf5-8279-4966-a098-d9e66627dccc",
              "parentUUID": "d3fb50de-d281-49bb-bb48-2a9879524d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DEFAULTTO-2 Test with legal negative numbers as value",
              "fullTitle": "defaultTo.js DEFAULTTO-2 Test with legal negative numbers as value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const num1 = -getRandomPositiveInteger(10000);\nconst num2 = getRandomPositiveInteger(10000);\nconst num = defaultTo(num1,num2);\nexpect(num).to.equal(num1);",
              "err": {},
              "uuid": "2518076f-472e-4185-85ab-a0fdf074925e",
              "parentUUID": "d3fb50de-d281-49bb-bb48-2a9879524d6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DEFAULTTO-4 Test with illegal non-numbers as value",
              "fullTitle": "defaultTo.js DEFAULTTO-4 Test with illegal non-numbers as value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const defaultNum = getRandomPositiveInteger(10000);\nlet num = defaultTo(null,defaultNum);\nexpect(num).to.equal(defaultNum);\nnum = defaultTo(undefined,defaultNum);\nexpect(num).to.equal(defaultNum);\nnum = defaultTo(NaN,defaultNum);\nexpect(num).to.equal(defaultNum);",
              "err": {
                "message": "AssertionError: expected NaN to equal 9658",
                "estack": "AssertionError: expected NaN to equal 9658\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/defaultTo.test.js:28:24)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "- NaN\n+ 9658\n"
              },
              "uuid": "812ab0d5-ee8d-4178-98c2-4ab524a6dc33",
              "parentUUID": "d3fb50de-d281-49bb-bb48-2a9879524d6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aae4eaf5-8279-4966-a098-d9e66627dccc",
            "2518076f-472e-4185-85ab-a0fdf074925e"
          ],
          "failures": [
            "812ab0d5-ee8d-4178-98c2-4ab524a6dc33"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0243abd-bebf-465a-b079-478ea7d29fb0",
          "title": "filter.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "FILTER-1 Test filter function with array of objects with a matching object property as filter parameter",
              "fullTitle": "filter.js FILTER-1 Test filter function with array of objects with a matching object property as filter parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(puppets, ({healthy}) => healthy)).to.deep.equal([{ \"name\" : \"Cookie Monster\", \"hobby\" : \"eating\", \"healthy\" : true}]);",
              "err": {},
              "uuid": "ee2d84ac-01cb-425e-bf4b-174f4581d92e",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-2 Test filter function with array of objects with a non-matching object property as filter parameter",
              "fullTitle": "filter.js FILTER-2 Test filter function with array of objects with a non-matching object property as filter parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(puppets, ({color}) => color)).to.deep.equal([[]]);",
              "err": {},
              "uuid": "1be4db7c-9b2c-4f92-8275-7ea8422a8c21",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-3 Test filter function with array of strings with a matching string as filter parameter",
              "fullTitle": "filter.js FILTER-3 Test filter function with array of strings with a matching string as filter parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(superHeroes, (string) => string === \"Superman\")).to.deep.equal([\"Superman\"]);",
              "err": {},
              "uuid": "b67fb045-3171-49b4-9f79-76abae760a81",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-4 Test filter function with array of strings with a non-matching string as filter parameter.",
              "fullTitle": "filter.js FILTER-4 Test filter function with array of strings with a non-matching string as filter parameter.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(superHeroes, (string) => string === \"Flash\")).to.deep.equal([[]]);",
              "err": {},
              "uuid": "884e8c72-bb73-49fc-8f20-fa94cfb18018",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-5 Test filter function with array of numbers with a matching number as filter parameter",
              "fullTitle": "filter.js FILTER-5 Test filter function with array of numbers with a matching number as filter parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(numbers, (number) => number === 2)).to.deep.equal([2]);",
              "err": {},
              "uuid": "6797f006-39b4-421c-bcfa-ac61044c28dd",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-6 Test filter function with array of numbers with a non-matching value as filter parameter",
              "fullTitle": "filter.js FILTER-6 Test filter function with array of numbers with a non-matching value as filter parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(numbers, (number) => number === 52)).to.deep.equal([[]]);",
              "err": {},
              "uuid": "a86dbc97-bf56-4eab-b5d4-fb7b4861924d",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-7 Test filter function with array of mixed type values with a matching value as filter parameter.",
              "fullTitle": "filter.js FILTER-7 Test filter function with array of mixed type values with a matching value as filter parameter.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(mixedArr, (number) => number === 2)).to.deep.equal([2]);",
              "err": {},
              "uuid": "dea67020-3a4c-4233-af35-2bcf5052ae30",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-8 Test filter function with array of mixed type values with a matching value as filter parameter.",
              "fullTitle": "filter.js FILTER-8 Test filter function with array of mixed type values with a matching value as filter parameter.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(mixedArr, (number) => number === 52)).to.deep.equal([[]]);",
              "err": {},
              "uuid": "bc78dae3-f3e4-4bef-8ed2-bcb89f4510ff",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FILTER-9 Test filter function with null as array",
              "fullTitle": "filter.js FILTER-9 Test filter function with null as array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(null, (number) => number === 2)).to.deep.equal([[]]);",
              "err": {},
              "uuid": "49c06a45-49dd-40ad-8ae8-0da05473c4c2",
              "parentUUID": "f0243abd-bebf-465a-b079-478ea7d29fb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee2d84ac-01cb-425e-bf4b-174f4581d92e",
            "1be4db7c-9b2c-4f92-8275-7ea8422a8c21",
            "b67fb045-3171-49b4-9f79-76abae760a81",
            "884e8c72-bb73-49fc-8f20-fa94cfb18018",
            "6797f006-39b4-421c-bcfa-ac61044c28dd",
            "a86dbc97-bf56-4eab-b5d4-fb7b4861924d",
            "dea67020-3a4c-4233-af35-2bcf5052ae30",
            "bc78dae3-f3e4-4bef-8ed2-bcb89f4510ff",
            "49c06a45-49dd-40ad-8ae8-0da05473c4c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "77e015d2-c328-4869-8d23-737e28275764",
          "title": "get.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\get.test.js",
          "file": "\\test\\get.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET-1 test get function with a valid path as string",
              "fullTitle": "get.js GET-1 test get function with a valid path as string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, 'cat[0].body.legs')).to.equal(4);",
              "err": {},
              "uuid": "2f1228a6-c8e0-47c8-bf0b-a3a40e78ef35",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-2 test get function with a valid path as string and default value as parameter",
              "fullTitle": "get.js GET-2 test get function with a valid path as string and default value as parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, 'cat[0].body.legs', 2)).to.equal(4);",
              "err": {},
              "uuid": "4014a6f9-2fdf-417d-8a03-b8345f468115",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-3 test get function with an invalid path as string",
              "fullTitle": "get.js GET-3 test get function with an invalid path as string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, 'cat[4].body.legs')).to.equal(undefined);",
              "err": {},
              "uuid": "5419828a-fa22-49a0-ab61-6af716b5763a",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-4 test get function with an invalid path as string and default value as parameter.",
              "fullTitle": "get.js GET-4 test get function with an invalid path as string and default value as parameter.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, 'cat[4].body.legs', 2)).to.equal(2);",
              "err": {},
              "uuid": "c580eb8c-ea12-438f-bc7c-415a87e5827b",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-5 test that get function works properly with valid path as array",
              "fullTitle": "get.js GET-5 test that get function works properly with valid path as array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, ['cat', '0', 'body', 'legs'])).to.equal(4);",
              "err": {},
              "uuid": "7c65bbc6-904a-42d1-a475-83a6247406ef",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-6 test get function with a valid path as array and default value as parameter",
              "fullTitle": "get.js GET-6 test get function with a valid path as array and default value as parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, ['cat', '0', 'body', 'legs']), 2).to.equal(4);",
              "err": {},
              "uuid": "169d1533-0665-433a-8a69-226622f5c6f9",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-7 test get function with an invalid path as array",
              "fullTitle": "get.js GET-7 test get function with an invalid path as array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, ['cat', '4', 'body', 'head'])).to.equal(undefined);",
              "err": {},
              "uuid": "25f690d9-3da6-4bf1-9ac1-13f8134c7d36",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-8 test get function with an invalid path as array and default value as parameter",
              "fullTitle": "get.js GET-8 test get function with an invalid path as array and default value as parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(testObject, ['cat', '4', 'body', 'head'], 2)).to.equal(2);",
              "err": {},
              "uuid": "874dea5f-3870-4057-a189-508f4aec1137",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-9 test get function with null value and an invalid path",
              "fullTitle": "get.js GET-9 test get function with null value and an invalid path",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(null, ['cat', '4', 'body', 'head'])).to.equal(undefined);",
              "err": {},
              "uuid": "dfbc54e4-758f-4e26-8f8b-e77f4f6eb134",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET-10 test get function with null value and an invalid path default value as parameter",
              "fullTitle": "get.js GET-10 test get function with null value and an invalid path default value as parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testObject = { 'cat': [{ 'body': { 'legs': 4 } }] };\nexpect(get(null, ['cat', '4', 'body', 'head'], 2)).to.equal(2);",
              "err": {},
              "uuid": "16c685e9-5000-4b10-b325-55216f0b9613",
              "parentUUID": "77e015d2-c328-4869-8d23-737e28275764",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f1228a6-c8e0-47c8-bf0b-a3a40e78ef35",
            "4014a6f9-2fdf-417d-8a03-b8345f468115",
            "5419828a-fa22-49a0-ab61-6af716b5763a",
            "c580eb8c-ea12-438f-bc7c-415a87e5827b",
            "7c65bbc6-904a-42d1-a475-83a6247406ef",
            "169d1533-0665-433a-8a69-226622f5c6f9",
            "25f690d9-3da6-4bf1-9ac1-13f8134c7d36",
            "874dea5f-3870-4057-a189-508f4aec1137",
            "dfbc54e4-758f-4e26-8f8b-e77f4f6eb134",
            "16c685e9-5000-4b10-b325-55216f0b9613"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
          "title": "map.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\map.test.js",
          "file": "\\test\\map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MAP-1 test map function with an array of numbers and iteratee function",
              "fullTitle": "map.js MAP-1 test map function with an array of numbers and iteratee function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map([2, 10], testIterateeMultiplyFunction)).to.deep.equal([4,100]);",
              "err": {},
              "uuid": "d238c174-666a-47a2-bdba-33917054c8f4",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MAP-2 test map function with an array of strings and iteratee function",
              "fullTitle": "map.js MAP-2 test map function with an array of strings and iteratee function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(['Moi!', 'Hei!'], testIterateeStringConcateFunction)).to.deep.equal(['Moi! Moi!','Hei! Hei!']);",
              "err": {},
              "uuid": "8356a14a-a177-4a21-925a-5ee928b6bf0c",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MAP-3 test map function with an array of objects and iteratee function",
              "fullTitle": "map.js MAP-3 test map function with an array of objects and iteratee function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map([{ \"name\" : \"Cookie Monster\", \"hobby\" : \"eating\"}, { \"name\" : \"Kermit\", \"hobby\" : \"dancing\"}], testIterateeObjectWithReturn)).to.deep.equal(['Cookie Monster', 'Kermit']);",
              "err": {},
              "uuid": "fad6dfbd-cb6b-4735-b56a-57691572ee46",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MAP-4 test map function with an array of objects and iteratee function not returning a value",
              "fullTitle": "map.js MAP-4 test map function with an array of objects and iteratee function not returning a value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map([{ \"name\" : \"Cookie Monster\", \"hobby\" : \"eating\"}, { \"name\" : \"Kermit\", \"hobby\" : \"dancing\"}], testIterateeObjectWithoutReturn)).to.deep.equal([undefined, undefined]);",
              "err": {},
              "uuid": "6bc79d7b-c819-442d-805d-5c13fecad4ee",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MAP-5 test map function with an array and no iteratee function",
              "fullTitle": "map.js MAP-5 test map function with an array and no iteratee function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => map([{ \"name\" : \"Cookie Monster\", \"hobby\" : \"eating\"}, { \"name\" : \"Kermit\", \"hobby\" : \"dancing\"}]).to.throw(TypeError, 'iteratee is not a function'));",
              "err": {},
              "uuid": "98de2ef3-086c-436f-bfef-62093c2f65ef",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MAP-6 test map function with null value as array parameter and iteratee function",
              "fullTitle": "map.js MAP-6 test map function with null value as array parameter and iteratee function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(null, testIterateeStringConcateFunction)).to.deep.equal([]);",
              "err": {},
              "uuid": "7dff7446-b277-44ce-a63b-48f644418b1f",
              "parentUUID": "0b0dbb37-544b-4937-b751-d6f26bb6edf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d238c174-666a-47a2-bdba-33917054c8f4",
            "8356a14a-a177-4a21-925a-5ee928b6bf0c",
            "fad6dfbd-cb6b-4735-b56a-57691572ee46",
            "6bc79d7b-c819-442d-805d-5c13fecad4ee",
            "98de2ef3-086c-436f-bfef-62093c2f65ef",
            "7dff7446-b277-44ce-a63b-48f644418b1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
          "title": "slice.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\slice.test.js",
          "file": "\\test\\slice.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "SLICE-1 test slice function with an array of numbers and positive start index with no end index",
              "fullTitle": "slice.js SLICE-1 test slice function with an array of numbers and positive start index with no end index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 2)).to.deep.equal([6,8]);",
              "err": {},
              "uuid": "dcac5652-75fc-4367-9721-564c31015523",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-2 test slice function with an array of numbers and positive start index with positive end index.",
              "fullTitle": "slice.js SLICE-2 test slice function with an array of numbers and positive start index with positive end index.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 1, 3)).to.deep.equal([4,6]);",
              "err": {},
              "uuid": "792e9417-80c6-4e44-8929-cf0a2ff219b9",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-3 test slice function with an array of numbers and positive start index with negative end index.",
              "fullTitle": "slice.js SLICE-3 test slice function with an array of numbers and positive start index with negative end index.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 1, -2)).to.deep.equal([4]);",
              "err": {},
              "uuid": "694283b6-25a9-4a74-9585-4174a3e98797",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-4 test slice function with an array of numbers and negative start index with no end index",
              "fullTitle": "slice.js SLICE-4 test slice function with an array of numbers and negative start index with no end index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, -1)).to.deep.equal([8]);",
              "err": {},
              "uuid": "5e06c1a3-de75-4ac2-9548-da8f69b951cb",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-5 test slice function with an array of numbers and negative start index with positive end index",
              "fullTitle": "slice.js SLICE-5 test slice function with an array of numbers and negative start index with positive end index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, -3, 3)).to.deep.equal([4,6]);",
              "err": {},
              "uuid": "461a05f9-b5ca-4ee5-b99d-05bd2dd2804d",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-6 test slice function with an array of numbers and negative start index with negative end index",
              "fullTitle": "slice.js SLICE-6 test slice function with an array of numbers and negative start index with negative end index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, -4, -3)).to.deep.equal([2]);",
              "err": {},
              "uuid": "685a019e-15e1-4322-a0a7-ccc3655cb9d1",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-7 that slice function works property with array of numbers and no start index",
              "fullTitle": "slice.js SLICE-7 that slice function works property with array of numbers and no start index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray)).to.deep.equal([2,4,6,8]);",
              "err": {},
              "uuid": "b3ff5451-bdf5-47ba-a2f3-ebf089a23e26",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-8 that slice function works property with empty array and no start and end index",
              "fullTitle": "slice.js SLICE-8 that slice function works property with empty array and no start and end index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [];\nexpect(slice(testArray)).to.deep.equal([]);",
              "err": {},
              "uuid": "7b6d6346-2255-42ee-bacb-6f74355972ed",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-9 that slice function works property with null value as array with no start and end index",
              "fullTitle": "slice.js SLICE-9 that slice function works property with null value as array with no start and end index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(slice(null)).to.deep.equal([]);",
              "err": {},
              "uuid": "2624c192-d53c-4242-a16d-fedd5bf8ea20",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-10 test slice function with an array of numbers and negative start index with negative end index and start index is greater than array length",
              "fullTitle": "slice.js SLICE-10 test slice function with an array of numbers and negative start index with negative end index and start index is greater than array length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, -5, -3)).to.deep.equal([2]);",
              "err": {},
              "uuid": "dd82787f-edb9-445c-9326-48f0b99d4285",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-11 test slice function with an array of numbers and positive start index with positive end index and start index is greater than array length",
              "fullTitle": "slice.js SLICE-11 test slice function with an array of numbers and positive start index with positive end index and start index is greater than array length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 5, 4)).to.deep.equal([]);",
              "err": {},
              "uuid": "96f1429c-cd67-47a4-99d8-01bb63e5fc65",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-12 test slice function with an array of numbers and positive start index with positive end index and end index is greater than array length",
              "fullTitle": "slice.js SLICE-12 test slice function with an array of numbers and positive start index with positive end index and end index is greater than array length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 3, 6)).to.deep.equal([8]);",
              "err": {
                "message": "AssertionError: expected [ 8, undefined, undefined ] to deeply equal [ 8 ]",
                "estack": "AssertionError: expected [ 8, undefined, undefined ] to deeply equal [ 8 ]\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/slice.test.js:51:48)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   8\n-   [undefined]\n-   [undefined]\n ]\n"
              },
              "uuid": "0f5a725f-b669-4d36-bcb1-2495ad389f28",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SLICE-13 test slice function with an array of numbers and positive start index with positive end index and both start and end index is greater than array length",
              "fullTitle": "slice.js SLICE-13 test slice function with an array of numbers and positive start index with positive end index and both start and end index is greater than array length",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testArray = [2, 4, 6, 8];\nexpect(slice(testArray, 5, 7)).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ undefined, undefined ] to deeply equal []",
                "estack": "AssertionError: expected [ undefined, undefined ] to deeply equal []\n    at Context.<anonymous> (file:///D:/COMP.SE.200-2021-2022-1/test/slice.test.js:55:48)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "- [\n-   [undefined]\n-   [undefined]\n- ]\n+ []\n"
              },
              "uuid": "f1a0ae25-432f-48a1-83a2-eae5fb476e3f",
              "parentUUID": "75c8b3bf-3d93-4120-88eb-0c4867658ffe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dcac5652-75fc-4367-9721-564c31015523",
            "792e9417-80c6-4e44-8929-cf0a2ff219b9",
            "694283b6-25a9-4a74-9585-4174a3e98797",
            "5e06c1a3-de75-4ac2-9548-da8f69b951cb",
            "461a05f9-b5ca-4ee5-b99d-05bd2dd2804d",
            "685a019e-15e1-4322-a0a7-ccc3655cb9d1",
            "b3ff5451-bdf5-47ba-a2f3-ebf089a23e26",
            "7b6d6346-2255-42ee-bacb-6f74355972ed",
            "2624c192-d53c-4242-a16d-fedd5bf8ea20",
            "dd82787f-edb9-445c-9326-48f0b99d4285",
            "96f1429c-cd67-47a4-99d8-01bb63e5fc65"
          ],
          "failures": [
            "0f5a725f-b669-4d36-bcb1-2495ad389f28",
            "f1a0ae25-432f-48a1-83a2-eae5fb476e3f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
          "title": "upperFirst.js",
          "fullFile": "D:\\COMP.SE.200-2021-2022-1\\test\\upperFirst.test.js",
          "file": "\\test\\upperFirst.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "UPPERFIRST-1 test upperFirst function with a string of all lowercase characters",
              "fullTitle": "upperFirst.js UPPERFIRST-1 test upperFirst function with a string of all lowercase characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const lowerCaseString = \"hello world!\";\nexpect(upperFirst(lowerCaseString)).to.equal('Hello world!');",
              "err": {},
              "uuid": "ea71e8c0-7ce1-42c3-b96a-68beaf5f350b",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-2 test upperFirst function with a string of all uppercase characters",
              "fullTitle": "upperFirst.js UPPERFIRST-2 test upperFirst function with a string of all uppercase characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const upperCaseString = \"I HAVE A CAT\";\nexpect(upperFirst(upperCaseString)).to.equal('I HAVE A CAT');",
              "err": {},
              "uuid": "382c4af5-be9d-42b8-aedb-2a1b2f4333f3",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-3 test upperFirst function with a string of mixed uppercase and lowercase characters",
              "fullTitle": "upperFirst.js UPPERFIRST-3 test upperFirst function with a string of mixed uppercase and lowercase characters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedCaseString = \"tHis Is A Mixed StrinG\";\nexpect(upperFirst(mixedCaseString)).to.equal('THis Is A Mixed StrinG');",
              "err": {},
              "uuid": "592bbbde-f818-4599-9592-3886cc42cb63",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-4 test upperFirst function with a string with number as first character",
              "fullTitle": "upperFirst.js UPPERFIRST-4 test upperFirst function with a string with number as first character",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numberFirstString = \"5 bottles of milk\";\nexpect(upperFirst(numberFirstString)).to.equal('5 bottles of milk');",
              "err": {},
              "uuid": "46b35b76-d619-4dc9-a878-96e3fd0887ea",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-6 test upperFirst function with a string with symbol as first character",
              "fullTitle": "upperFirst.js UPPERFIRST-6 test upperFirst function with a string with symbol as first character",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbolFirstString = \"%tampere university\";\nexpect(upperFirst(symbolFirstString)).to.equal('%tampere university');",
              "err": {},
              "uuid": "c29a2c37-80ef-49d6-8133-f0abb03f7ff6",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-7 test upperFirst function without a parameter",
              "fullTitle": "upperFirst.js UPPERFIRST-7 test upperFirst function without a parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst()).to.equal('');",
              "err": {},
              "uuid": "b8de229c-e9b4-419f-9829-0ef7c240c681",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UPPERFIRST-8 test upperFirst function with number as parameter",
              "fullTitle": "upperFirst.js UPPERFIRST-8 test upperFirst function with number as parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const number = 123;\nexpect(() => upperFirst(number).to.throw(TypeError, 'string.slice is not a function'));",
              "err": {},
              "uuid": "82065feb-3daa-4731-a1c1-b9e07de52fc9",
              "parentUUID": "c5b7641d-6c1d-4959-a72f-08a2136fe20f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea71e8c0-7ce1-42c3-b96a-68beaf5f350b",
            "382c4af5-be9d-42b8-aedb-2a1b2f4333f3",
            "592bbbde-f818-4599-9592-3886cc42cb63",
            "46b35b76-d619-4dc9-a878-96e3fd0887ea",
            "c29a2c37-80ef-49d6-8133-f0abb03f7ff6",
            "b8de229c-e9b4-419f-9829-0ef7c240c681",
            "82065feb-3daa-4731-a1c1-b9e07de52fc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}